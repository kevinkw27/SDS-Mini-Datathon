import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns


"""
# 1) Load dataset
df = pd.read_csv(r"C:\Users\kevin\Documents\NUS\Y2S1\SDS Datathon\insurance.csv")

# 2) Features (exclude charges for unsupervised learning)
X = df[["age", "bmi", "children", "sex", "smoker", "region"]]

# 3) Preprocessing
num_cols = ["age", "bmi", "children"]
cat_cols = ["sex", "smoker", "region"]

preprocessor = ColumnTransformer(
    transformers=[
        ("num", StandardScaler(), num_cols),
        ("cat", OneHotEncoder(drop="first"), cat_cols)
    ]
)

X_processed = preprocessor.fit_transform(X)

# 4) PCA for visualization (2 components)
pca = PCA(n_components=2, random_state=42)
X_pca = pca.fit_transform(X_processed)

# 5) K-Means clustering
k = 4  # number of clusters, adjust as needed
kmeans = KMeans(n_clusters=k, random_state=42)
labels = kmeans.fit_predict(X_processed)

# 6) Visualize clusters
plt.figure(figsize=(8,6))
sns.scatterplot(x=X_pca[:,0], y=X_pca[:,1], hue=labels, palette="Set2", s=60)
plt.title(f"K-Means Clusters (k={k}) projected with PCA")
plt.xlabel("PCA Component 1")
plt.ylabel("PCA Component 2")
plt.legend(title="Cluster")
plt.show()

# Optional: attach cluster labels to original dataframe
df['cluster'] = labels
print(df.groupby('cluster')[["age","bmi","children"]].mean())

# 1) Average charges per cluster
cluster_charges = df.groupby('cluster')['charges'].agg(['mean','median','count']).reset_index()
cluster_charges.rename(columns={'mean':'avg_charges','median':'median_charges','count':'num_people'}, inplace=True)
print(cluster_charges)

# 2) Optional: visualize
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(8,5))
sns.barplot(data=cluster_charges, x='cluster', y='avg_charges', palette='Set2')
plt.title('Average Insurance Charges by Cluster')
plt.ylabel('Average Charges ($)')
plt.xlabel('Cluster')
plt.show()


# Numeric features to summarize
numeric_cols = ["age", "bmi", "children", "charges"]
# Aggregate by cluster
cluster_summary = df.groupby('cluster')[numeric_cols].mean().reset_index()
# Optional: round for readability
cluster_summary = cluster_summary.round(2)
print(cluster_summary)
# Cluster 3 (older + obese) likely has highest average charges.
# Cluster 2 (young adults) likely has lowest charges.
# Cluster 1 (middle-aged, many children) may be moderate.
# Cluster 0 (older, few children, moderate BMI) may also be moderate.

